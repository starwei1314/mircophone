package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.LastChat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_CHAT".
*/
public class LastChatDao extends AbstractDao<LastChat, Long> {

    public static final String TABLENAME = "LAST_CHAT";

    /**
     * Properties of entity LastChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LastChatTarget = new Property(1, String.class, "lastChatTarget", false, "LAST_CHAT_TARGET");
        public final static Property LastChatImgPath = new Property(2, String.class, "lastChatImgPath", false, "LAST_CHAT_IMG_PATH");
        public final static Property LastChatTime = new Property(3, String.class, "lastChatTime", false, "LAST_CHAT_TIME");
        public final static Property LastChatContent = new Property(4, String.class, "lastChatContent", false, "LAST_CHAT_CONTENT");
    }


    public LastChatDao(DaoConfig config) {
        super(config);
    }
    
    public LastChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAST_CHAT_TARGET\" TEXT," + // 1: lastChatTarget
                "\"LAST_CHAT_IMG_PATH\" TEXT," + // 2: lastChatImgPath
                "\"LAST_CHAT_TIME\" TEXT," + // 3: lastChatTime
                "\"LAST_CHAT_CONTENT\" TEXT);"); // 4: lastChatContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lastChatTarget = entity.getLastChatTarget();
        if (lastChatTarget != null) {
            stmt.bindString(2, lastChatTarget);
        }
 
        String lastChatImgPath = entity.getLastChatImgPath();
        if (lastChatImgPath != null) {
            stmt.bindString(3, lastChatImgPath);
        }
 
        String lastChatTime = entity.getLastChatTime();
        if (lastChatTime != null) {
            stmt.bindString(4, lastChatTime);
        }
 
        String lastChatContent = entity.getLastChatContent();
        if (lastChatContent != null) {
            stmt.bindString(5, lastChatContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lastChatTarget = entity.getLastChatTarget();
        if (lastChatTarget != null) {
            stmt.bindString(2, lastChatTarget);
        }
 
        String lastChatImgPath = entity.getLastChatImgPath();
        if (lastChatImgPath != null) {
            stmt.bindString(3, lastChatImgPath);
        }
 
        String lastChatTime = entity.getLastChatTime();
        if (lastChatTime != null) {
            stmt.bindString(4, lastChatTime);
        }
 
        String lastChatContent = entity.getLastChatContent();
        if (lastChatContent != null) {
            stmt.bindString(5, lastChatContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LastChat readEntity(Cursor cursor, int offset) {
        LastChat entity = new LastChat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lastChatTarget
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastChatImgPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastChatTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // lastChatContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastChat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLastChatTarget(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastChatImgPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastChatTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastChatContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LastChat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LastChat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastChat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
