package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.FriendAbout;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_ABOUT".
*/
public class FriendAboutDao extends AbstractDao<FriendAbout, Long> {

    public static final String TABLENAME = "FRIEND_ABOUT";

    /**
     * Properties of entity FriendAbout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImgPath = new Property(1, String.class, "imgPath", false, "IMG_PATH");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property No_disturb = new Property(3, Boolean.class, "no_disturb", false, "NO_DISTURB");
        public final static Property Star_target = new Property(4, Boolean.class, "star_target", false, "STAR_TARGET");
        public final static Property Background = new Property(5, String.class, "background", false, "BACKGROUND");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Stick = new Property(7, Boolean.class, "stick", false, "STICK");
        public final static Property ChatContent = new Property(8, String.class, "chatContent", false, "CHAT_CONTENT");
    }


    public FriendAboutDao(DaoConfig config) {
        super(config);
    }
    
    public FriendAboutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_ABOUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMG_PATH\" TEXT," + // 1: imgPath
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"NO_DISTURB\" INTEGER," + // 3: no_disturb
                "\"STAR_TARGET\" INTEGER," + // 4: star_target
                "\"BACKGROUND\" TEXT," + // 5: background
                "\"REMARK\" TEXT," + // 6: remark
                "\"STICK\" INTEGER," + // 7: stick
                "\"CHAT_CONTENT\" TEXT);"); // 8: chatContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_ABOUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendAbout entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(2, imgPath);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        Boolean no_disturb = entity.getNo_disturb();
        if (no_disturb != null) {
            stmt.bindLong(4, no_disturb ? 1L: 0L);
        }
 
        Boolean star_target = entity.getStar_target();
        if (star_target != null) {
            stmt.bindLong(5, star_target ? 1L: 0L);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(6, background);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        Boolean stick = entity.getStick();
        if (stick != null) {
            stmt.bindLong(8, stick ? 1L: 0L);
        }
 
        String chatContent = entity.getChatContent();
        if (chatContent != null) {
            stmt.bindString(9, chatContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendAbout entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(2, imgPath);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        Boolean no_disturb = entity.getNo_disturb();
        if (no_disturb != null) {
            stmt.bindLong(4, no_disturb ? 1L: 0L);
        }
 
        Boolean star_target = entity.getStar_target();
        if (star_target != null) {
            stmt.bindLong(5, star_target ? 1L: 0L);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(6, background);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        Boolean stick = entity.getStick();
        if (stick != null) {
            stmt.bindLong(8, stick ? 1L: 0L);
        }
 
        String chatContent = entity.getChatContent();
        if (chatContent != null) {
            stmt.bindString(9, chatContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendAbout readEntity(Cursor cursor, int offset) {
        FriendAbout entity = new FriendAbout( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // no_disturb
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // star_target
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // background
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // stick
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // chatContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendAbout entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNo_disturb(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setStar_target(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setBackground(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStick(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setChatContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendAbout entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendAbout entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendAbout entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
