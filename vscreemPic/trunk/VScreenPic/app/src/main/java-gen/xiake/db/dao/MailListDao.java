package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.MailList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL_LIST".
*/
public class MailListDao extends AbstractDao<MailList, Void> {

    public static final String TABLENAME = "MAIL_LIST";

    /**
     * Properties of entity MailList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Is_chatlist = new Property(1, Integer.class, "is_chatlist", false, "IS_CHATLIST");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Msg_num = new Property(4, Integer.class, "msg_num", false, "MSG_NUM");
        public final static Property Chat_bg = new Property(5, String.class, "chat_bg", false, "CHAT_BG");
        public final static Property Com_time = new Property(6, String.class, "com_time", false, "COM_TIME");
        public final static Property Recent_new = new Property(7, String.class, "recent_new", false, "RECENT_NEW");
        public final static Property IsMute = new Property(8, Boolean.class, "isMute", false, "IS_MUTE");
        public final static Property Chat_record = new Property(9, String.class, "chat_record", false, "CHAT_RECORD");
    }


    public MailListDao(DaoConfig config) {
        super(config);
    }
    
    public MailListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_LIST\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"IS_CHATLIST\" INTEGER," + // 1: is_chatlist
                "\"ID\" TEXT," + // 2: id
                "\"ICON\" TEXT," + // 3: icon
                "\"MSG_NUM\" INTEGER," + // 4: msg_num
                "\"CHAT_BG\" TEXT," + // 5: chat_bg
                "\"COM_TIME\" TEXT," + // 6: com_time
                "\"RECENT_NEW\" TEXT," + // 7: recent_new
                "\"IS_MUTE\" INTEGER," + // 8: isMute
                "\"CHAT_RECORD\" TEXT);"); // 9: chat_record
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MailList entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        Integer is_chatlist = entity.getIs_chatlist();
        if (is_chatlist != null) {
            stmt.bindLong(2, is_chatlist);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        Integer msg_num = entity.getMsg_num();
        if (msg_num != null) {
            stmt.bindLong(5, msg_num);
        }
 
        String chat_bg = entity.getChat_bg();
        if (chat_bg != null) {
            stmt.bindString(6, chat_bg);
        }
 
        String com_time = entity.getCom_time();
        if (com_time != null) {
            stmt.bindString(7, com_time);
        }
 
        String recent_new = entity.getRecent_new();
        if (recent_new != null) {
            stmt.bindString(8, recent_new);
        }
 
        Boolean isMute = entity.getIsMute();
        if (isMute != null) {
            stmt.bindLong(9, isMute ? 1L: 0L);
        }
 
        String chat_record = entity.getChat_record();
        if (chat_record != null) {
            stmt.bindString(10, chat_record);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MailList entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        Integer is_chatlist = entity.getIs_chatlist();
        if (is_chatlist != null) {
            stmt.bindLong(2, is_chatlist);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        Integer msg_num = entity.getMsg_num();
        if (msg_num != null) {
            stmt.bindLong(5, msg_num);
        }
 
        String chat_bg = entity.getChat_bg();
        if (chat_bg != null) {
            stmt.bindString(6, chat_bg);
        }
 
        String com_time = entity.getCom_time();
        if (com_time != null) {
            stmt.bindString(7, com_time);
        }
 
        String recent_new = entity.getRecent_new();
        if (recent_new != null) {
            stmt.bindString(8, recent_new);
        }
 
        Boolean isMute = entity.getIsMute();
        if (isMute != null) {
            stmt.bindLong(9, isMute ? 1L: 0L);
        }
 
        String chat_record = entity.getChat_record();
        if (chat_record != null) {
            stmt.bindString(10, chat_record);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MailList readEntity(Cursor cursor, int offset) {
        MailList entity = new MailList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // is_chatlist
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msg_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chat_bg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // com_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // recent_new
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isMute
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // chat_record
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MailList entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIs_chatlist(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsg_num(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChat_bg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCom_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRecent_new(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsMute(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setChat_record(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MailList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MailList entity) {
        return null;
    }

    @Override
    public boolean hasKey(MailList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
