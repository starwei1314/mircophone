package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.Data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA".
*/
public class DataDao extends AbstractDao<Data, Void> {

    public static final String TABLENAME = "DATA";

    /**
     * Properties of entity Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property My_info = new Property(0, String.class, "my_info", false, "MY_INFO");
        public final static Property New_friend_list = new Property(1, String.class, "new_friend_list", false, "NEW_FRIEND_LIST");
        public final static Property Allfriend = new Property(2, String.class, "allfriend", false, "ALLFRIEND");
    }


    public DataDao(DaoConfig config) {
        super(config);
    }
    
    public DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA\" (" + //
                "\"MY_INFO\" TEXT," + // 0: my_info
                "\"NEW_FRIEND_LIST\" TEXT," + // 1: new_friend_list
                "\"ALLFRIEND\" TEXT);"); // 2: allfriend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Data entity) {
        stmt.clearBindings();
 
        String my_info = entity.getMy_info();
        if (my_info != null) {
            stmt.bindString(1, my_info);
        }
 
        String new_friend_list = entity.getNew_friend_list();
        if (new_friend_list != null) {
            stmt.bindString(2, new_friend_list);
        }
 
        String allfriend = entity.getAllfriend();
        if (allfriend != null) {
            stmt.bindString(3, allfriend);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Data entity) {
        stmt.clearBindings();
 
        String my_info = entity.getMy_info();
        if (my_info != null) {
            stmt.bindString(1, my_info);
        }
 
        String new_friend_list = entity.getNew_friend_list();
        if (new_friend_list != null) {
            stmt.bindString(2, new_friend_list);
        }
 
        String allfriend = entity.getAllfriend();
        if (allfriend != null) {
            stmt.bindString(3, allfriend);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Data readEntity(Cursor cursor, int offset) {
        Data entity = new Data( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // my_info
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // new_friend_list
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // allfriend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Data entity, int offset) {
        entity.setMy_info(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNew_friend_list(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAllfriend(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Data entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Data entity) {
        return null;
    }

    @Override
    public boolean hasKey(Data entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
