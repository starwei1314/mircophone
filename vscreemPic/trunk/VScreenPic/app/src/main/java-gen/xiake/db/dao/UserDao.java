package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Chat_bg = new Property(1, String.class, "chat_bg", false, "CHAT_BG");
        public final static Property My_nc = new Property(2, String.class, "my_nc", false, "MY_NC");
        public final static Property Tx = new Property(3, String.class, "tx", false, "TX");
        public final static Property My_wxh = new Property(4, String.class, "my_wxh", false, "MY_WXH");
        public final static Property Money = new Property(5, String.class, "money", false, "MONEY");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_BG\" TEXT," + // 1: chat_bg
                "\"MY_NC\" TEXT," + // 2: my_nc
                "\"TX\" TEXT," + // 3: tx
                "\"MY_WXH\" TEXT," + // 4: my_wxh
                "\"MONEY\" TEXT);"); // 5: money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chat_bg = entity.getChat_bg();
        if (chat_bg != null) {
            stmt.bindString(2, chat_bg);
        }
 
        String my_nc = entity.getMy_nc();
        if (my_nc != null) {
            stmt.bindString(3, my_nc);
        }
 
        String tx = entity.getTx();
        if (tx != null) {
            stmt.bindString(4, tx);
        }
 
        String my_wxh = entity.getMy_wxh();
        if (my_wxh != null) {
            stmt.bindString(5, my_wxh);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(6, money);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chat_bg = entity.getChat_bg();
        if (chat_bg != null) {
            stmt.bindString(2, chat_bg);
        }
 
        String my_nc = entity.getMy_nc();
        if (my_nc != null) {
            stmt.bindString(3, my_nc);
        }
 
        String tx = entity.getTx();
        if (tx != null) {
            stmt.bindString(4, tx);
        }
 
        String my_wxh = entity.getMy_wxh();
        if (my_wxh != null) {
            stmt.bindString(5, my_wxh);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(6, money);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chat_bg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // my_nc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tx
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // my_wxh
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChat_bg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMy_nc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTx(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMy_wxh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMoney(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
