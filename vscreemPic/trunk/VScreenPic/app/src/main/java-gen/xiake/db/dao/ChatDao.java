package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT".
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatTarget = new Property(1, String.class, "chatTarget", false, "CHAT_TARGET");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property MyContent = new Property(3, String.class, "myContent", false, "MY_CONTENT");
        public final static Property HisContent = new Property(4, String.class, "hisContent", false, "HIS_CONTENT");
        public final static Property DeleteContent = new Property(5, String.class, "deleteContent", false, "DELETE_CONTENT");
        public final static Property RecallContent = new Property(6, String.class, "recallContent", false, "RECALL_CONTENT");
        public final static Property MyGift = new Property(7, String.class, "myGift", false, "MY_GIFT");
        public final static Property MyTransfer = new Property(8, String.class, "myTransfer", false, "MY_TRANSFER");
        public final static Property HisGift = new Property(9, String.class, "hisGift", false, "HIS_GIFT");
        public final static Property HisTransfer = new Property(10, String.class, "hisTransfer", false, "HIS_TRANSFER");
    }


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_TARGET\" TEXT," + // 1: chatTarget
                "\"TIME\" TEXT," + // 2: time
                "\"MY_CONTENT\" TEXT," + // 3: myContent
                "\"HIS_CONTENT\" TEXT," + // 4: hisContent
                "\"DELETE_CONTENT\" TEXT," + // 5: deleteContent
                "\"RECALL_CONTENT\" TEXT," + // 6: recallContent
                "\"MY_GIFT\" TEXT," + // 7: myGift
                "\"MY_TRANSFER\" TEXT," + // 8: myTransfer
                "\"HIS_GIFT\" TEXT," + // 9: hisGift
                "\"HIS_TRANSFER\" TEXT);"); // 10: hisTransfer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatTarget = entity.getChatTarget();
        if (chatTarget != null) {
            stmt.bindString(2, chatTarget);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String myContent = entity.getMyContent();
        if (myContent != null) {
            stmt.bindString(4, myContent);
        }
 
        String hisContent = entity.getHisContent();
        if (hisContent != null) {
            stmt.bindString(5, hisContent);
        }
 
        String deleteContent = entity.getDeleteContent();
        if (deleteContent != null) {
            stmt.bindString(6, deleteContent);
        }
 
        String recallContent = entity.getRecallContent();
        if (recallContent != null) {
            stmt.bindString(7, recallContent);
        }
 
        String myGift = entity.getMyGift();
        if (myGift != null) {
            stmt.bindString(8, myGift);
        }
 
        String myTransfer = entity.getMyTransfer();
        if (myTransfer != null) {
            stmt.bindString(9, myTransfer);
        }
 
        String hisGift = entity.getHisGift();
        if (hisGift != null) {
            stmt.bindString(10, hisGift);
        }
 
        String hisTransfer = entity.getHisTransfer();
        if (hisTransfer != null) {
            stmt.bindString(11, hisTransfer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatTarget = entity.getChatTarget();
        if (chatTarget != null) {
            stmt.bindString(2, chatTarget);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String myContent = entity.getMyContent();
        if (myContent != null) {
            stmt.bindString(4, myContent);
        }
 
        String hisContent = entity.getHisContent();
        if (hisContent != null) {
            stmt.bindString(5, hisContent);
        }
 
        String deleteContent = entity.getDeleteContent();
        if (deleteContent != null) {
            stmt.bindString(6, deleteContent);
        }
 
        String recallContent = entity.getRecallContent();
        if (recallContent != null) {
            stmt.bindString(7, recallContent);
        }
 
        String myGift = entity.getMyGift();
        if (myGift != null) {
            stmt.bindString(8, myGift);
        }
 
        String myTransfer = entity.getMyTransfer();
        if (myTransfer != null) {
            stmt.bindString(9, myTransfer);
        }
 
        String hisGift = entity.getHisGift();
        if (hisGift != null) {
            stmt.bindString(10, hisGift);
        }
 
        String hisTransfer = entity.getHisTransfer();
        if (hisTransfer != null) {
            stmt.bindString(11, hisTransfer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatTarget
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // myContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hisContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deleteContent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // recallContent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // myGift
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // myTransfer
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hisGift
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // hisTransfer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatTarget(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMyContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHisContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleteContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecallContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMyGift(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMyTransfer(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHisGift(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHisTransfer(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
