package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.SmallMoney;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMALL_MONEY".
*/
public class SmallMoneyDao extends AbstractDao<SmallMoney, Long> {

    public static final String TABLENAME = "SMALL_MONEY";

    /**
     * Properties of entity SmallMoney.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pay = new Property(1, String.class, "pay", false, "PAY");
        public final static Property Kiting = new Property(2, String.class, "kiting", false, "KITING");
        public final static Property PayTime = new Property(3, String.class, "payTime", false, "PAY_TIME");
        public final static Property KitingTime = new Property(4, String.class, "kitingTime", false, "KITING_TIME");
        public final static Property GetkitingTime = new Property(5, String.class, "getkitingTime", false, "GETKITING_TIME");
        public final static Property PayMoney = new Property(6, String.class, "payMoney", false, "PAY_MONEY");
        public final static Property KitingMoney = new Property(7, String.class, "kitingMoney", false, "KITING_MONEY");
        public final static Property PayBank = new Property(8, String.class, "payBank", false, "PAY_BANK");
        public final static Property KitingBank = new Property(9, String.class, "kitingBank", false, "KITING_BANK");
    }


    public SmallMoneyDao(DaoConfig config) {
        super(config);
    }
    
    public SmallMoneyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMALL_MONEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAY\" TEXT," + // 1: pay
                "\"KITING\" TEXT," + // 2: kiting
                "\"PAY_TIME\" TEXT," + // 3: payTime
                "\"KITING_TIME\" TEXT," + // 4: kitingTime
                "\"GETKITING_TIME\" TEXT," + // 5: getkitingTime
                "\"PAY_MONEY\" TEXT," + // 6: payMoney
                "\"KITING_MONEY\" TEXT," + // 7: kitingMoney
                "\"PAY_BANK\" TEXT," + // 8: payBank
                "\"KITING_BANK\" TEXT);"); // 9: kitingBank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMALL_MONEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallMoney entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(2, pay);
        }
 
        String kiting = entity.getKiting();
        if (kiting != null) {
            stmt.bindString(3, kiting);
        }
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(4, payTime);
        }
 
        String kitingTime = entity.getKitingTime();
        if (kitingTime != null) {
            stmt.bindString(5, kitingTime);
        }
 
        String getkitingTime = entity.getGetkitingTime();
        if (getkitingTime != null) {
            stmt.bindString(6, getkitingTime);
        }
 
        String payMoney = entity.getPayMoney();
        if (payMoney != null) {
            stmt.bindString(7, payMoney);
        }
 
        String kitingMoney = entity.getKitingMoney();
        if (kitingMoney != null) {
            stmt.bindString(8, kitingMoney);
        }
 
        String payBank = entity.getPayBank();
        if (payBank != null) {
            stmt.bindString(9, payBank);
        }
 
        String kitingBank = entity.getKitingBank();
        if (kitingBank != null) {
            stmt.bindString(10, kitingBank);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallMoney entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(2, pay);
        }
 
        String kiting = entity.getKiting();
        if (kiting != null) {
            stmt.bindString(3, kiting);
        }
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(4, payTime);
        }
 
        String kitingTime = entity.getKitingTime();
        if (kitingTime != null) {
            stmt.bindString(5, kitingTime);
        }
 
        String getkitingTime = entity.getGetkitingTime();
        if (getkitingTime != null) {
            stmt.bindString(6, getkitingTime);
        }
 
        String payMoney = entity.getPayMoney();
        if (payMoney != null) {
            stmt.bindString(7, payMoney);
        }
 
        String kitingMoney = entity.getKitingMoney();
        if (kitingMoney != null) {
            stmt.bindString(8, kitingMoney);
        }
 
        String payBank = entity.getPayBank();
        if (payBank != null) {
            stmt.bindString(9, payBank);
        }
 
        String kitingBank = entity.getKitingBank();
        if (kitingBank != null) {
            stmt.bindString(10, kitingBank);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmallMoney readEntity(Cursor cursor, int offset) {
        SmallMoney entity = new SmallMoney( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pay
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kiting
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // payTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kitingTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // getkitingTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // payMoney
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // kitingMoney
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // payBank
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kitingBank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallMoney entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKiting(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPayTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKitingTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGetkitingTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayMoney(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKitingMoney(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayBank(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKitingBank(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmallMoney entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmallMoney entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallMoney entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
