package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.AliFriend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALI_FRIEND".
*/
public class AliFriendDao extends AbstractDao<AliFriend, Long> {

    public static final String TABLENAME = "ALI_FRIEND";

    /**
     * Properties of entity AliFriend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Nick = new Property(2, String.class, "nick", false, "NICK");
        public final static Property IsFriend = new Property(3, Boolean.class, "isFriend", false, "IS_FRIEND");
        public final static Property VipLv = new Property(4, String.class, "VipLv", false, "VIP_LV");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
        public final static Property Mark = new Property(6, String.class, "mark", false, "MARK");
    }


    public AliFriendDao(DaoConfig config) {
        super(config);
    }
    
    public AliFriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALI_FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"NICK\" TEXT," + // 2: nick
                "\"IS_FRIEND\" INTEGER," + // 3: isFriend
                "\"VIP_LV\" TEXT," + // 4: VipLv
                "\"NUM\" TEXT," + // 5: num
                "\"MARK\" TEXT);"); // 6: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALI_FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AliFriend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        Boolean isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(4, isFriend ? 1L: 0L);
        }
 
        String VipLv = entity.getVipLv();
        if (VipLv != null) {
            stmt.bindString(5, VipLv);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AliFriend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        Boolean isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(4, isFriend ? 1L: 0L);
        }
 
        String VipLv = entity.getVipLv();
        if (VipLv != null) {
            stmt.bindString(5, VipLv);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AliFriend readEntity(Cursor cursor, int offset) {
        AliFriend entity = new AliFriend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nick
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isFriend
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VipLv
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AliFriend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsFriend(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setVipLv(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AliFriend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AliFriend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AliFriend entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
