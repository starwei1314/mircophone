package xiake.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xiake.db.entity.ChatRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_RECORD".
*/
public class ChatRecordDao extends AbstractDao<ChatRecord, Void> {

    public static final String TABLENAME = "CHAT_RECORD";

    /**
     * Properties of entity ChatRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsMe = new Property(0, Boolean.class, "isMe", false, "IS_ME");
        public final static Property Msg_type = new Property(1, String.class, "msg_type", false, "MSG_TYPE");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Audio_num = new Property(4, Integer.class, "audio_num", false, "AUDIO_NUM");
        public final static Property IsRead = new Property(5, Boolean.class, "isRead", false, "IS_READ");
        public final static Property IsReceive = new Property(6, Boolean.class, "isReceive", false, "IS_RECEIVE");
        public final static Property Money = new Property(7, Integer.class, "money", false, "MONEY");
        public final static Property Message = new Property(8, String.class, "message", false, "MESSAGE");
        public final static Property Time01 = new Property(9, String.class, "time01", false, "TIME01");
        public final static Property Time02 = new Property(10, String.class, "time02", false, "TIME02");
        public final static Property Msg_img = new Property(11, String.class, "msg_img", false, "MSG_IMG");
    }


    public ChatRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_RECORD\" (" + //
                "\"IS_ME\" INTEGER," + // 0: isMe
                "\"MSG_TYPE\" TEXT," + // 1: msg_type
                "\"TEXT\" TEXT," + // 2: text
                "\"TIME\" TEXT," + // 3: time
                "\"AUDIO_NUM\" INTEGER," + // 4: audio_num
                "\"IS_READ\" INTEGER," + // 5: isRead
                "\"IS_RECEIVE\" INTEGER," + // 6: isReceive
                "\"MONEY\" INTEGER," + // 7: money
                "\"MESSAGE\" TEXT," + // 8: message
                "\"TIME01\" TEXT," + // 9: time01
                "\"TIME02\" TEXT," + // 10: time02
                "\"MSG_IMG\" TEXT);"); // 11: msg_img
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Boolean isMe = entity.getIsMe();
        if (isMe != null) {
            stmt.bindLong(1, isMe ? 1L: 0L);
        }
 
        String msg_type = entity.getMsg_type();
        if (msg_type != null) {
            stmt.bindString(2, msg_type);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        Integer audio_num = entity.getAudio_num();
        if (audio_num != null) {
            stmt.bindLong(5, audio_num);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(6, isRead ? 1L: 0L);
        }
 
        Boolean isReceive = entity.getIsReceive();
        if (isReceive != null) {
            stmt.bindLong(7, isReceive ? 1L: 0L);
        }
 
        Integer money = entity.getMoney();
        if (money != null) {
            stmt.bindLong(8, money);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(9, message);
        }
 
        String time01 = entity.getTime01();
        if (time01 != null) {
            stmt.bindString(10, time01);
        }
 
        String time02 = entity.getTime02();
        if (time02 != null) {
            stmt.bindString(11, time02);
        }
 
        String msg_img = entity.getMsg_img();
        if (msg_img != null) {
            stmt.bindString(12, msg_img);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Boolean isMe = entity.getIsMe();
        if (isMe != null) {
            stmt.bindLong(1, isMe ? 1L: 0L);
        }
 
        String msg_type = entity.getMsg_type();
        if (msg_type != null) {
            stmt.bindString(2, msg_type);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        Integer audio_num = entity.getAudio_num();
        if (audio_num != null) {
            stmt.bindLong(5, audio_num);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(6, isRead ? 1L: 0L);
        }
 
        Boolean isReceive = entity.getIsReceive();
        if (isReceive != null) {
            stmt.bindLong(7, isReceive ? 1L: 0L);
        }
 
        Integer money = entity.getMoney();
        if (money != null) {
            stmt.bindLong(8, money);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(9, message);
        }
 
        String time01 = entity.getTime01();
        if (time01 != null) {
            stmt.bindString(10, time01);
        }
 
        String time02 = entity.getTime02();
        if (time02 != null) {
            stmt.bindString(11, time02);
        }
 
        String msg_img = entity.getMsg_img();
        if (msg_img != null) {
            stmt.bindString(12, msg_img);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChatRecord readEntity(Cursor cursor, int offset) {
        ChatRecord entity = new ChatRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0, // isMe
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // audio_num
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isRead
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isReceive
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // money
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // message
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // time01
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // time02
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // msg_img
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatRecord entity, int offset) {
        entity.setIsMe(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
        entity.setMsg_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudio_num(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsRead(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsReceive(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setMoney(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime01(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTime02(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMsg_img(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChatRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChatRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(ChatRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
